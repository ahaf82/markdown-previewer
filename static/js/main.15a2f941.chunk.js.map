{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","setOptions","breaks","App","props","state","input","startText","handleChange","bind","markDown","e","this","setState","target","value","__html","id","className","onChange","React","Component","BackArrow","href","Editor","type","rows","cols","Preview","dangerouslySetInnerHTML","ReactDOM","render","document","getElementById","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.15a2f941.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport marked from 'marked';\r\nimport './App.css';\r\n\r\nmarked.setOptions({\r\n  breaks: true,\r\n});\r\n\r\nclass App extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state={\r\n      input: startText\r\n    }\r\n    this.handleChange=this.handleChange.bind(this);\r\n    this.markDown=this.markDown.bind(this);\r\n  }\r\n  handleChange(e) {\r\n    this.setState({\r\n      input: e.target.value,\r\n    });\r\n  }\r\n  markDown() {\r\n    return {__html: marked(this.state.input)}\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id=\"editField\" className=\"text-center\">\r\n          <Editor markDown={this.state.input} onChange={this.handleChange}/>\r\n         </div>\r\n\r\n        <Preview marked={this.markDown()}/>\r\n\r\n        <BackArrow />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst BackArrow = () => {\r\n  return (\r\n    \r\n    <div id=\"backwards\" className=\"panel panel-primary\">\r\n      <div className=\"panel-heading text-center\"><h2><a href=\"http://ahaf-dev.com\"><i className=\"fa fa-backward\"/>  ahaf-dev</a></h2></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Editor = (props) => {\r\n  return (\r\n      <div className=\"panel panel-primary\">\r\n        <div className=\"panel-heading\"><h1>Editor</h1></div>\r\n        <div className=\"panel-body\"><textarea id=\"editor\" type=\"text\" className=\"input-sm\" value={props.markDown} onChange={props.onChange} rows=\"8\" cols=\"50\"/></div>\r\n      </div>\r\n  )\r\n}\r\n\r\nconst Preview = (props) => {\r\n  return (\r\n      <div id=\"prevWindow\" className=\"panel panel-primary\">\r\n        <h1 className=\"panel-heading text-center\">Preview</h1>\r\n        <div id=\"preview\" className=\"panel-body\" dangerouslySetInnerHTML={props.marked}>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nconst startText =\r\n`# This is my text to start width:\r\n## Welcome to my React Markdown Previewer!\r\n\r\n[This is a link to a Markdown demo](https://marked.js.org/demo/?text=)\r\n\r\n\\`An Inline Element\\`\r\n\r\n\\`\\`\\`\r\nmultiple\r\nbackticked\r\nlines\r\n\\`\\`\\`\r\n\r\n* here\r\n* is a small\r\n* list\r\n\r\n>A blockquote\r\n\r\n![image](https://helpx.adobe.com/content/dam/help/en/stock/how-to/visual-reverse-image-search/jcr_content/main-pars/image/visual-reverse-image-search-v2_intro.jpg)\r\n\r\n__Some bold text__\r\n`\r\n\r\nReactDOM.render(\r\n  <App/>,\r\n  document.getElementById(\"content\")\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('content'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}